digraph G {
fontname = "Avenir Book"
fontsize = 10
node [
fontname = "Avenir Book"
fontsize = 10
shape = "record"
]
edge [
fontname = "Avenir Book"
fontsize = 10
]
Test [
shape="record",
label = "{Test|+ init() : void\l+ main(arg0:String[]) : void throws Exception\l}"
];
Notifier [
shape="record",
label = "{\<\<interface\>\>\nNotifier|+ registerObserver(arg0:Observer) : void\l+ removeObserver(arg0:Observer) : void\l+ notifyObservers(arg0:Object) : void\l}"
];
NewBeeFramework [
shape="record",
label = "{NewBeeFramework|- model : IModel\l- start : IMethod\l- appType : String\l- cs : List\l- additionalClasses : List\l- detectors : Set\l- out : IOutputStream\l|+ init(arg0:String,arg1:List,arg2:List,arg3:IOutputStream) : void\l+ addDetector(arg0:IDetector) : void\l+ processAll() : void throws Exception\l+ detectPattern() : void throws Exception\l+ setStartMethod(arg0:IMethod) : void\l+ loadClass() : void throws IOException\l- loadClassNonRecur() : void throws IOException\l- loadClassRecur() : void throws IOException\l- loadMethodCallRelations() : void throws IOException\l+ readClassAndMethods(arg0:IMethod,arg1:int,arg2:List) : void throws IOException\l+ writeOutput() : void\l}"
];
App [
shape="record",
label = "{App|+ init() : void\l+ main(arg0:String[]) : void throws Exception\l+ createUmlWithPattern(arg0:String) : void throws Exception\l+ createUmlDiagram(arg0:String) : void throws Exception\l+ createSequenceDiagram(arg0:String[]) : void throws Exception\l}"
];
TMXXreader [
shape="record",
label = "{TMXXreader|- INPUT_FOLDER : String\l- INPUT_CLASSES : String\l- OUTPUT_DIR : String\l- DOT_PATH : String\l- PHASES : String\l- APP_TYPE : String\l- inputFolder : String\l- inputClasses : List\l- outputDir : String\l- dotPath : String\l- phases : List\l- attributeMap : Map\l- appType : String\l- reader : BufferedReader\l|+ init(arg0:String) : void throws FileNotFoundException\l+ readFile() : void throws IOException\l- getContent(arg0:String) : String\l- splitAndAddPhases(arg0:String) : void\l- splitAndAddClasses(arg0:String) : void\l+ toString() : String\l+ getInputFolder() : String\l+ getOutputDir() : String\l+ getAppType() : String\l+ getAttrMap() : Map\l+ getPhases() : List\l+ getInputClasses() : List\l+ getDotPath() : String\l}"
];
BufferedReader [
shape="record",
style="filled"
fillcolor="green"
label = "{BufferedReader\n\<\<decorator\>\>\n|- in : Reader\l- cb : char[]\l- nChars : int\l- nextChar : int\l- INVALIDATED : int\l- UNMARKED : int\l- markedChar : int\l- readAheadLimit : int\l- skipLF : boolean\l- markedSkipLF : boolean\l- defaultCharBufferSize : int\l- defaultExpectedLineLength : int\l|+ init(arg0:Reader,arg1:int) : void\l+ init(arg0:Reader) : void\l- ensureOpen() : void throws IOException\l- fill() : void throws IOException\l+ read() : int throws IOException\l- read1(arg0:char[],arg1:int,arg2:int) : int throws IOException\l+ read(arg0:char[],arg1:int,arg2:int) : int throws IOException\l readLine(arg0:boolean) : String throws IOException\l+ readLine() : String throws IOException\l+ skip(arg0:long) : long throws IOException\l+ ready() : boolean throws IOException\l+ markSupported() : boolean\l+ mark(arg0:int) : void throws IOException\l+ reset() : void throws IOException\l+ close() : void throws IOException\l+ lines() : Stream\l clinit() : void\l}"
];
FrameworkInterface [
shape="record",
label = "{FrameworkInterface|+ init() : void\l+ detectPattern(arg0:IDetector,arg1:IModel) : void throws Exception\l+ generateStartMethod(arg0:String) : IMethod\l+ loadMethodCallRelations(arg0:int,arg1:IMethod) : void throws IOException\l+ readClassAndMethods(arg0:IMethod,arg1:int,arg2:List) : void throws IOException\l+ writeOutput(arg0:IOutputStream,arg1:String,arg2:IMethod,arg3:IModel) : void\l}"
];
Reader [
shape="record",
style="filled"
fillcolor="green"
label = "{Reader\n\<\<component\>\>\n|# lock : Object\l- maxSkipBufferSize : int\l- skipBuffer : char[]\l|# init() : void\l# init(arg0:Object) : void\l+ read(arg0:CharBuffer) : int throws IOException\l+ read() : int throws IOException\l+ read(arg0:char[]) : int throws IOException\l+ read(arg0:char[],arg1:int,arg2:int) : int throws IOException\l+ skip(arg0:long) : long throws IOException\l+ ready() : boolean throws IOException\l+ markSupported() : boolean\l+ mark(arg0:int) : void throws IOException\l+ reset() : void throws IOException\l+ close() : void throws IOException\l}"
];
ClassFinder [
shape="record",
label = "{ClassFinder|- DOT : char\l- SLASH : char\l- CLASS_SUFFIX : String\l- BAD_PACKAGE_ERROR : String\l|+ init() : void\l+ find(arg0:String) : List\l- find(arg0:File,arg1:String) : List\l}"
];
Framework [
shape="record",
label = "{Framework|- LOADING_CLASS_NAMES : double\l- LOADING_INPUT_CLASSES : double\l- LOADING_CLASSES_FROM_FOLDER : double\l- PATTERN_DETECTION : double\l- GENERATE_DOT : double\l- CLASS_LOADING : String\l- DECORATOR_DETECTION : String\l- COMPOSITE_DETECTION : String\l- ADAPTER_DETECTION : String\l- SINGLETON_DETECTION : String\l- DOT_GENERATION : String\l- reader : TMXXreader\l- classes : List\l- detectors : Set\l- out : IOutputStream\l- model : IModel\l- start : IMethod\l- observers : List\l- box : Framework$ProgressBox\l|+ init() : void throws FileNotFoundException,IOException\l+ loadConfig(arg0:String) : void\l- changeProgress(arg0:String,arg1:double) : void\l- addDetector(arg0:IDetector) : void\l- addDetectors(arg0:double) : void\l- detectPatterns(arg0:double) : void throws Exception\l+ Analyze() : void throws Exception\l- processPhases() : void throws Exception\l- detectPattern() : void throws Exception\l- loadClassNames() : List\l+ toString() : String\l+ registerObserver(arg0:Observer) : void\l+ removeObserver(arg0:Observer) : void\l+ notifyObservers(arg0:Object) : void\l- loadClassFromInputFolder() : void throws IOException\l- loadInputClasses() : void throws IOException\l- loadClassRecur() : void throws IOException\l}"
];
Runtime [
shape="record",
color="blue"
label = "{Runtime\n\<\<Singleton\>\>\n|- currentRuntime : Runtime\l|+ getRuntime() : Runtime\l- init() : void\l+ exit(arg0:int) : void\l+ addShutdownHook(arg0:Thread) : void\l+ removeShutdownHook(arg0:Thread) : boolean\l+ halt(arg0:int) : void\l+ runFinalizersOnExit(arg0:boolean) : void\l+ exec(arg0:String) : Process throws IOException\l+ exec(arg0:String,arg1:String[]) : Process throws IOException\l+ exec(arg0:String,arg1:String[],arg2:File) : Process throws IOException\l+ exec(arg0:String[]) : Process throws IOException\l+ exec(arg0:String[],arg1:String[]) : Process throws IOException\l+ exec(arg0:String[],arg1:String[],arg2:File) : Process throws IOException\l+ availableProcessors() : int\l+ freeMemory() : long\l+ totalMemory() : long\l+ maxMemory() : long\l+ gc() : void\l- runFinalization0() : void\l+ runFinalization() : void\l+ traceInstructions(arg0:boolean) : void\l+ traceMethodCalls(arg0:boolean) : void\l+ load(arg0:String) : void\l load0(arg0:Class,arg1:String) : void\l+ loadLibrary(arg0:String) : void\l loadLibrary0(arg0:Class,arg1:String) : void\l+ getLocalizedInputStream(arg0:InputStream) : InputStream\l+ getLocalizedOutputStream(arg0:OutputStream) : OutputStream\l clinit() : void\l}"
];
ClassFinderTest [
shape="record",
label = "{ClassFinderTest|+ init() : void\l+ main(arg0:String[]) : void throws Exception\l}"
];
Utility [
shape="record",
label = "{Utility|+ APP_UML : String\l+ APP_UMLWP : String\l+ APP_SD : String\l+ APP_TYPE : String\l| clinit() : void\l+ init() : void\l+ simplifyClassName(arg0:String) : String\l+ simplifyType(arg0:String) : String\l+ isNotBuiltIn(arg0:String) : boolean\l+ removeRelationNotInPackage(arg0:IModel) : Set\l+ parseMethodSignature(arg0:String) : String[]\l}"
];
MainDriver [
shape="record",
label = "{MainDriver|- reader : TMXXreader\l- currentTask : String\l|+ init(arg0:String) : void throws FileNotFoundException\l+ readFile() : void throws IOException\l+ getCurrentTask() : String\l+ setCurrentTask(arg0:String) : void\l}"
];
Framework -> TMXXreader [arrowhead="vee"]
Runtime -> IllegalArgumentException [arrowhead="vee",style="dashed"]
Reader -> IOException [arrowhead="vee",style="dashed"]
BufferedReader -> Reader [arrowhead="onormal"]
Runtime -> InputStream [arrowhead="vee",style="dashed"]
Runtime -> Process [arrowhead="vee",style="dashed"]
Reader -> CharBuffer [arrowhead="vee",style="dashed"]
BufferedReader -> BufferedReader [arrowhead="vee",style="dashed"]
Runtime -> Object [arrowhead="onormal"]
Framework -> Notifier [arrowhead="onormal",style="dashed"]
Runtime -> Thread [arrowhead="vee",style="dashed"]
Reader -> boolean [arrowhead="vee",style="dashed"]
BufferedReader -> IOException [arrowhead="vee",style="dashed"]
BufferedReader -> String [arrowhead="vee",style="dashed"]
Runtime -> RuntimePermission [arrowhead="vee",style="dashed"]
Runtime -> boolean [arrowhead="vee",style="dashed"]
Runtime -> StringBuilder [arrowhead="vee",style="dashed"]
Reader -> Object [arrowhead="onormal"]
BufferedReader -> Stream [arrowhead="vee",style="dashed"]
Runtime -> File [arrowhead="vee",style="dashed"]
Runtime -> ProcessBuilder [arrowhead="vee",style="dashed"]
Reader -> NullPointerException [arrowhead="vee",style="dashed"]
Reader -> Object [arrowhead="vee"]
MainDriver -> TMXXreader [arrowhead="vee"]
Reader -> char[] [arrowhead="vee"]
Runtime -> StringTokenizer [arrowhead="vee",style="dashed"]
BufferedReader -> int [arrowhead="vee"]
Runtime -> String [arrowhead="vee",style="dashed"]
BufferedReader -> char[] [arrowhead="vee"]
Runtime -> OutputStream [arrowhead="vee",style="dashed"]
Reader -> int [arrowhead="vee"]
BufferedReader -> Reader [arrowhead="vee",label="decorates"]
Reader -> long [arrowhead="vee",style="dashed"]
BufferedReader -> StringBuffer [arrowhead="vee",style="dashed"]
Runtime -> Class [arrowhead="vee",style="dashed"]
BufferedReader -> long [arrowhead="vee",style="dashed"]
Reader -> Closeable [arrowhead="onormal",style="dashed"]
Reader -> Readable [arrowhead="onormal",style="dashed"]
Runtime -> SecurityException [arrowhead="vee",style="dashed"]
Reader -> IllegalArgumentException [arrowhead="vee",style="dashed"]
App -> NewBeeFramework [arrowhead="vee",style="dashed"]
Runtime -> int [arrowhead="vee",style="dashed"]
BufferedReader -> IllegalArgumentException [arrowhead="vee",style="dashed"]
Runtime -> String[] [arrowhead="vee",style="dashed"]
BufferedReader -> IndexOutOfBoundsException [arrowhead="vee",style="dashed"]
Runtime -> long [arrowhead="vee",style="dashed"]
Runtime -> UnsatisfiedLinkError [arrowhead="vee",style="dashed"]
BufferedReader -> boolean [arrowhead="vee"]
Runtime -> Runtime [arrowhead="vee"]
}
