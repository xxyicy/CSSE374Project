digraph G {
fontname = "Avenir Book"
fontsize = 10
node [
fontname = "Avenir Book"
fontsize = 10
shape = "record"
]
edge [
fontname = "Avenir Book"
fontsize = 10
]
Pattern [
shape="record",
label = "{Pattern|- name : String\l- classes : Set\l|+ init(arg0:String) : void\l+ getName() : String\l+ getClasses() : Set\l+ addClass(arg0:IClass) : void\l+ toString() : String\l}"
];
Comparable [
shape="record",
label = "{\<\<interface\>\>\nComparable|+ compareTo(arg0:Object) : int\l}"
];
IMethod [
shape="record",
label = "{\<\<interface\>\>\nIMethod|+ getName() : String\l+ getReturnType() : String\l+ getAccess() : String\l+ getParamTypes() : List\l+ getExceptions() : List\l+ getClassName() : String\l+ getCalls() : List\l+ setParent(arg0:IMethod) : void\l+ addCall(arg0:IMethod) : void\l+ getParent() : IMethod\l+ setClassName(arg0:String) : void\l+ setReturnType(arg0:String) : void\l+ compareMethod(arg0:IMethod) : boolean\l+ printCallChains(arg0:int) : String\l+ isStatic() : boolean\l+ setStatic(arg0:boolean) : void\l}"
];
Field [
shape="record",
label = "{Field|- isStatic : boolean\l- name : String\l- type : String\l- access : String\l- innerType : String\l|+ init(arg0:String,arg1:String,arg2:String) : void\l+ toString() : String\l+ getName() : String\l+ getType() : String\l+ getAccess() : String\l+ accept(arg0:IVisitor) : void\l+ isStatic() : boolean\l+ setStatic(arg0:boolean) : void\l+ getInnerType() : String\l+ setInnerType(arg0:String) : void\l}"
];
IDetector [
shape="record",
label = "{\<\<interface\>\>\nIDetector|+ detect(arg0:IModel) : void throws Exception\l}"
];
ITraverser [
shape="record",
label = "{\<\<interface\>\>\nITraverser|+ accept(arg0:IVisitor) : void\l}"
];
IPattern [
shape="record",
label = "{\<\<interface\>\>\nIPattern|+ getName() : String\l+ getClasses() : Set\l+ addClass(arg0:IClass) : void\l}"
];
ClassFinder [
shape="record",
label = "{ClassFinder|- DOT : char\l- SLASH : char\l- CLASS_SUFFIX : String\l- BAD_PACKAGE_ERROR : String\l|+ init() : void\l+ find(arg0:String) : List\l- find(arg0:File,arg1:String) : List\l}"
];
Closeable [
shape="record",
label = "{\<\<interface\>\>\nCloseable|+ close() : void throws IOException\l}"
];
CompositeDetector [
shape="record",
label = "{CompositeDetector|+ init() : void\l+ detect(arg0:IModel) : void throws Exception\l- updatePatternInformationWithSuper(arg0:IClass,arg1:Set,arg2:IModel) : void throws Exception\l- addComponents(arg0:String,arg1:String,arg2:IModel,arg3:Set) : void\l- checkComponent(arg0:String,arg1:IModel) : boolean throws Exception\l- getAllDescendents(arg0:IModel,arg1:String) : Set\l- addSubClasses(arg0:IModel,arg1:String,arg2:Set) : void\l- detectChildList(arg0:Set,arg1:IClass) : IField\l- checkFieldUsedInMethod(arg0:IField,arg1:IClass) : boolean\l- getAllInterfaces(arg0:Set,arg1:IModel) : Map\l- getSuperClasses(arg0:Set,arg1:IModel) : Set throws Exception\l- getInterfaces(arg0:IClass,arg1:Set) : Set\l- getClassByName(arg0:IModel,arg1:String) : IClass\l- getSuperClassNames(arg0:IClass,arg1:Set) : Set\l- getSuper(arg0:String,arg1:Set) : String\l}"
];
LookupKey [
shape="record",
label = "{LookupKey| visitType : VisitType\l clazz : Class\l|+ init(arg0:VisitType,arg1:Class) : void\l+ hashCode() : int\l+ equals(arg0:Object) : boolean\l}"
];
IDeclaration [
shape="record",
label = "{\<\<interface\>\>\nIDeclaration|+ getType() : String\l+ getName() : String\l+ getTags() : Set\l+ addTag(arg0:String) : void\l}"
];
MethodVisitor [
shape="record",
label = "{MethodVisitor|# api : int\l# mv : MethodVisitor\l|+ init(arg0:int) : void\l+ init(arg0:int,arg1:MethodVisitor) : void\l+ visitParameter(arg0:String,arg1:int) : void\l+ visitAnnotationDefault() : AnnotationVisitor\l+ visitAnnotation(arg0:String,arg1:boolean) : AnnotationVisitor\l+ visitTypeAnnotation(arg0:int,arg1:TypePath,arg2:String,arg3:boolean) : AnnotationVisitor\l+ visitParameterAnnotation(arg0:int,arg1:String,arg2:boolean) : AnnotationVisitor\l+ visitAttribute(arg0:Attribute) : void\l+ visitCode() : void\l+ visitFrame(arg0:int,arg1:int,arg2:Object[],arg3:int,arg4:Object[]) : void\l+ visitInsn(arg0:int) : void\l+ visitIntInsn(arg0:int,arg1:int) : void\l+ visitVarInsn(arg0:int,arg1:int) : void\l+ visitTypeInsn(arg0:int,arg1:String) : void\l+ visitFieldInsn(arg0:int,arg1:String,arg2:String,arg3:String) : void\l+ visitMethodInsn(arg0:int,arg1:String,arg2:String,arg3:String) : void\l+ visitMethodInsn(arg0:int,arg1:String,arg2:String,arg3:String,arg4:boolean) : void\l+ visitInvokeDynamicInsn(arg0:String,arg1:String,arg2:Handle,arg3:Object[]) : void\l+ visitJumpInsn(arg0:int,arg1:Label) : void\l+ visitLabel(arg0:Label) : void\l+ visitLdcInsn(arg0:Object) : void\l+ visitIincInsn(arg0:int,arg1:int) : void\l+ visitTableSwitchInsn(arg0:int,arg1:int,arg2:Label,arg3:Label[]) : void\l+ visitLookupSwitchInsn(arg0:Label,arg1:int[],arg2:Label[]) : void\l+ visitMultiANewArrayInsn(arg0:String,arg1:int) : void\l+ visitInsnAnnotation(arg0:int,arg1:TypePath,arg2:String,arg3:boolean) : AnnotationVisitor\l+ visitTryCatchBlock(arg0:Label,arg1:Label,arg2:Label,arg3:String) : void\l+ visitTryCatchAnnotation(arg0:int,arg1:TypePath,arg2:String,arg3:boolean) : AnnotationVisitor\l+ visitLocalVariable(arg0:String,arg1:String,arg2:String,arg3:Label,arg4:Label,arg5:int) : void\l+ visitLocalVariableAnnotation(arg0:int,arg1:TypePath,arg2:Label[],arg3:Label[],arg4:int[],arg5:String,arg6:boolean) : AnnotationVisitor\l+ visitLineNumber(arg0:int,arg1:Label) : void\l+ visitMaxs(arg0:int,arg1:int) : void\l+ visitEnd() : void\l}"
];
Relation [
shape="record",
label = "{Relation|- from : String\l- to : String\l- type : String\l- des : String\l|+ accept(arg0:IVisitor) : void\l+ init(arg0:String,arg1:String,arg2:String) : void\l+ toString() : String\l+ getFrom() : String\l+ getTo() : String\l+ getType() : String\l+ hashCode() : int\l+ equals(arg0:Object) : boolean\l+ getDes() : String\l+ setDes(arg0:String) : void\l}"
];
Test [
shape="record",
label = "{Test|- v : GraphVizOutputStream\l|+ init() : void\l+ main(arg0:String[]) : void throws Exception\l}"
];
IModel [
shape="record",
label = "{\<\<interface\>\>\nIModel|+ getClasses() : Set\l+ getRelations() : Set\l+ addClass(arg0:IClass) : void\l+ addRelation(arg0:IRelation) : void\l+ contains(arg0:IRelation) : boolean\l+ addPattern(arg0:IPattern) : void\l+ getPatterns() : Set\l+ setRelation(arg0:Set) : void\l}"
];
Serializable [
shape="record",
label = "{\<\<interface\>\>\nSerializable}"
];
NewbeeFramework [
shape="record",
label = "{NewbeeFramework|- model : IModel\l- start : IMethod\l- appType : String\l- cs : List\l- detectors : Set\l- out : IOutputStream\l|+ init(arg0:String,arg1:List,arg2:IOutputStream) : void\l+ addDetector(arg0:IDetector) : void\l+ process() : void throws Exception\l- detectPattern() : void throws Exception\l- loadClass() : void throws IOException\l- loadClassNonRecur() : void throws IOException\l- loadClassRecur() : void throws IOException\l- loadMethodCallRelations() : void throws IOException\l+ readClassAndMethods(arg0:IMethod,arg1:int,arg2:List) : void throws IOException\l- writeOutput() : void\l}"
];
VisitType [
shape="record",
label = "{VisitType|+ PreVisit : VisitType\l+ Visit : VisitType\l+ PostVisit : VisitType\l- ENUM$VALUES : VisitType[]\l| clinit() : void\l- init(arg0:String,arg1:int) : void\l+ values() : VisitType[]\l+ valueOf(arg0:String) : VisitType\l}"
];
IVisitMethod [
shape="record",
label = "{\<\<interface\>\>\nIVisitMethod|+ execute(arg0:ITraverser) : void\l}"
];
Clazz [
shape="record",
label = "{Clazz|- methods : List\l- fields : List\l- declaration : IDeclaration\l|+ init() : void\l+ accept(arg0:IVisitor) : void\l+ addMethod(arg0:IMethod) : void\l+ addField(arg0:IField) : void\l+ addDeclaration(arg0:IDeclaration) : void\l+ getDeclaration() : IDeclaration\l+ getMethods() : List\l+ getFields() : List\l+ toString() : String\l+ getName() : String\l+ getTags() : Set\l+ addTag(arg0:String) : void\l}"
];
ClassDeclarationVisitor [
shape="record",
label = "{ClassDeclarationVisitor|- c : IClass\l- m : IModel\l- cs : List\l|+ init(arg0:int,arg1:IClass,arg2:IModel) : void\l+ init(arg0:int,arg1:IClass,arg2:IModel,arg3:List) : void\l+ visit(arg0:int,arg1:int,arg2:String,arg3:String,arg4:String,arg5:String[]) : void\l}"
];
IRelation [
shape="record",
label = "{\<\<interface\>\>\nIRelation|+ getFrom() : String\l+ getTo() : String\l+ getType() : String\l+ getDes() : String\l+ setDes(arg0:String) : void\l}"
];
IClass [
shape="record",
label = "{\<\<interface\>\>\nIClass|+ addMethod(arg0:IMethod) : void\l+ addField(arg0:IField) : void\l+ addDeclaration(arg0:IDeclaration) : void\l+ getDeclaration() : IDeclaration\l+ getMethods() : List\l+ getFields() : List\l+ getName() : String\l+ getTags() : Set\l+ addTag(arg0:String) : void\l}"
];
SDEditOutputStream [
shape="record",
label = "{SDEditOutputStream|- visitor : IVisitor\l- declaration : Map\l- existedClass : List\l- classes : StringBuffer\l- content : StringBuffer\l- count : int\l|+ init(arg0:OutputStream) : void throws IOException\l- write(arg0:String) : void\l- writeln(arg0:String) : void\l+ write(arg0:IMethod) : void\l- setupVisitMethod() : void\l+ toString() : String\l- addClassName(arg0:String,arg1:String) : void\l- addMessage(arg0:IMethod,arg1:IMethod) : void\l access$0(arg0:SDEditOutputStream,arg1:String,arg2:String) : void\l access$1(arg0:SDEditOutputStream,arg1:IMethod,arg2:IMethod) : void\l}"
];
SingletonDetector [
shape="record",
label = "{SingletonDetector|- visitor : IVisitor\l- className : String\l- staticField : boolean\l privateConstructor : boolean\l staticMethod : boolean\l|+ init() : void\l+ detect(arg0:IModel) : void\l- setupVisitMethod() : void\l- setupVisitField() : void\l access$0(arg0:SingletonDetector) : String\l access$1(arg0:SingletonDetector,arg1:boolean) : void\l}"
];
IVisitMethod [
shape="record",
label = "{\<\<interface\>\>\nIVisitMethod|+ execute(arg0:ITraverser) : void\l}"
];
IClass [
shape="record",
label = "{\<\<interface\>\>\nIClass|+ addMethod(arg0:IMethod) : void\l+ addField(arg0:IField) : void\l+ addDeclaration(arg0:IDeclaration) : void\l+ getDeclaration() : IDeclaration\l+ getMethods() : List\l+ getFields() : List\l+ getName() : String\l+ getTags() : Set\l+ addTag(arg0:String) : void\l}"
];
GraphVizOutputStream [
shape="record",
label = "{GraphVizOutputStream|- visitor : IVisitor\l- result : StringBuffer\l|+ init(arg0:OutputStream) : void throws IOException\l- write(arg0:String) : void\l- writeln(arg0:String) : void\l+ write(arg0:IModel) : void\l+ toString() : String\l+ start() : void\l+ end() : void\l- setupPreVisitClass() : void\l- setupVisitClass() : void\l- setupPostVisitClass() : void\l- setupVisitDeclaration() : void\l+ setupVisitMethod() : void\l- setupVisitField() : void\l+ setupVisitRelation() : void\l access$0(arg0:GraphVizOutputStream,arg1:String) : void\l access$1(arg0:GraphVizOutputStream,arg1:String) : void\l}"
];
Visitor [
shape="record",
label = "{Visitor| keyToVisitMethodMap : Map\l|+ init() : void\l+ preVisit(arg0:ITraverser) : void\l+ visit(arg0:ITraverser) : void\l+ postVisit(arg0:ITraverser) : void\l- doVisit(arg0:VisitType,arg1:ITraverser) : void\l+ addVisit(arg0:VisitType,arg1:Class,arg2:IVisitMethod) : void\l+ removeVisit(arg0:VisitType,arg1:Class) : void\l}"
];
OutputStream [
shape="record",
style="filled"
fillcolor="green"
label = "{OutputStream\n\<\<component\>\>\n|+ init() : void\l+ write(arg0:int) : void throws IOException\l+ write(arg0:byte[]) : void throws IOException\l+ write(arg0:byte[],arg1:int,arg2:int) : void throws IOException\l+ flush() : void throws IOException\l+ close() : void throws IOException\l}"
];
AutoCloseable [
shape="record",
label = "{\<\<interface\>\>\nAutoCloseable|+ close() : void throws Exception\l}"
];
Method [
shape="record",
style="filled"
fillcolor="yellow"
label = "{Method\n\<\<Composite\>\>\n|- name : String\l- type : String\l- access : String\l- params : List\l- exceptions : List\l- className : String\l- calls : List\l- parent : IMethod\l- isStatic : boolean\l|+ init(arg0:String,arg1:String,arg2:String,arg3:List,arg4:List,arg5:String) : void\l+ toString() : String\l+ getName() : String\l+ getReturnType() : String\l+ getAccess() : String\l+ getExceptions() : List\l+ getParamTypes() : List\l+ accept(arg0:IVisitor) : void\l+ getClassName() : String\l+ hashCode() : int\l+ equals(arg0:Object) : boolean\l+ getCalls() : List\l+ addCall(arg0:IMethod) : void\l+ setClassName(arg0:String) : void\l+ setReturnType(arg0:String) : void\l+ compareMethod(arg0:IMethod) : boolean\l+ printCallChains(arg0:int) : String\l+ setParent(arg0:IMethod) : void\l+ getParent() : IMethod\l+ isStatic() : boolean\l+ setStatic(arg0:boolean) : void\l}"
];
IDetector [
shape="record",
label = "{\<\<interface\>\>\nIDetector|+ detect(arg0:IModel) : void throws Exception\l}"
];
FilterOutputStream [
shape="record",
style="filled"
fillcolor="green"
label = "{FilterOutputStream\n\<\<decorator\>\>\n|# out : OutputStream\l|+ init(arg0:OutputStream) : void\l+ write(arg0:int) : void throws IOException\l+ write(arg0:byte[]) : void throws IOException\l+ write(arg0:byte[],arg1:int,arg2:int) : void throws IOException\l+ flush() : void throws IOException\l+ close() : void throws IOException\l}"
];
Enum [
shape="record",
label = "{Enum|- name : String\l- ordinal : int\l|+ name() : String\l+ ordinal() : int\l# init(arg0:String,arg1:int) : void\l+ toString() : String\l+ equals(arg0:Object) : boolean\l+ hashCode() : int\l# clone() : Object throws CloneNotSupportedException\l+ compareTo(arg0:Enum) : int\l+ getDeclaringClass() : Class\l+ valueOf(arg0:Class,arg1:String) : Enum\l# finalize() : void\l- readObject(arg0:ObjectInputStream) : void throws IOException,ClassNotFoundException\l- readObjectNoData() : void throws ObjectStreamException\l+ compareTo(arg0:Object) : int\l}"
];
AdapterDetector [
shape="record",
label = "{AdapterDetector|+ init() : void\l+ detect(arg0:IModel) : void throws Exception\l- constructPattern(arg0:String,arg1:IClass,arg2:IClass,arg3:IModel) : void throws IOException\l- intersection(arg0:List,arg1:List) : List\l- getClassByName(arg0:IModel,arg1:String) : IClass\l- getInterfaces(arg0:IClass,arg1:Set) : Set\l}"
];
IMethod [
shape="record",
style="filled"
fillcolor="yellow"
label = "{\<\<interface\>\>\nIMethod\n\<\<Component\>\>\n|+ getName() : String\l+ getReturnType() : String\l+ getAccess() : String\l+ getParamTypes() : List\l+ getExceptions() : List\l+ getClassName() : String\l+ getCalls() : List\l+ setParent(arg0:IMethod) : void\l+ addCall(arg0:IMethod) : void\l+ getParent() : IMethod\l+ setClassName(arg0:String) : void\l+ setReturnType(arg0:String) : void\l+ compareMethod(arg0:IMethod) : boolean\l+ printCallChains(arg0:int) : String\l+ isStatic() : boolean\l+ setStatic(arg0:boolean) : void\l}"
];
SequenceMethodVisitor [
shape="record",
label = "{SequenceMethodVisitor|- m : IMethod\l- className : String\l|+ init(arg0:int,arg1:IMethod,arg2:String) : void\l+ init(arg0:int,arg1:ClassVisitor,arg2:IMethod,arg3:String) : void\l+ visitMethod(arg0:int,arg1:String,arg2:String,arg3:String,arg4:String[]) : MethodVisitor\l addAccessLevel(arg0:int) : String\l addReturnType(arg0:String) : String\l addArguments(arg0:String) : List\l access$0(arg0:SequenceMethodVisitor) : IMethod\l}"
];
DecoratorDetector [
shape="record",
label = "{DecoratorDetector|+ init() : void\l+ detect(arg0:IModel) : void throws Exception\l- getParamInConst(arg0:IClass) : Set\l- getClassByName(arg0:IModel,arg1:String) : IClass\l- detectPatternWithField(arg0:IField,arg1:IClass,arg2:IModel) : void throws Exception\l- updateModelWithPattern(arg0:IClass,arg1:IModel,arg2:String) : void throws Exception\l- composeSuper(arg0:IClass,arg1:IModel) : IField\l- composeInterface(arg0:IClass,arg1:IModel) : IField\l- getInterfaces(arg0:IClass,arg1:Set) : Set\l- getSuperClasses(arg0:IClass,arg1:Set) : Set\l- getSuper(arg0:String,arg1:Set) : String\l}"
];
Model [
shape="record",
label = "{Model|- classes : Set\l- relations : Set\l- patterns : Set\l|+ init() : void\l+ accept(arg0:IVisitor) : void\l+ contains(arg0:IRelation) : boolean\l+ toString() : String\l+ getClasses() : Set\l+ getRelations() : Set\l+ setRelation(arg0:Set) : void\l+ addClass(arg0:IClass) : void\l+ addRelation(arg0:IRelation) : void\l- checkRelation(arg0:IRelation) : boolean\l+ getPatterns() : Set\l+ addPattern(arg0:IPattern) : void\l}"
];
IVisitor [
shape="record",
label = "{\<\<interface\>\>\nIVisitor|+ preVisit(arg0:ITraverser) : void\l+ visit(arg0:ITraverser) : void\l+ postVisit(arg0:ITraverser) : void\l+ addVisit(arg0:VisitType,arg1:Class,arg2:IVisitMethod) : void\l+ removeVisit(arg0:VisitType,arg1:Class) : void\l}"
];
IField [
shape="record",
label = "{\<\<interface\>\>\nIField|+ getName() : String\l+ getType() : String\l+ getAccess() : String\l+ isStatic() : boolean\l+ setStatic(arg0:boolean) : void\l+ getInnerType() : String\l+ setInnerType(arg0:String) : void\l}"
];
Utility [
shape="record",
label = "{Utility|+ APP_UML : String\l+ APP_UMLWP : String\l+ APP_SD : String\l+ APP_TYPE : String\l| clinit() : void\l+ init() : void\l+ simplifyClassName(arg0:String) : String\l+ simplifyType(arg0:String) : String\l+ isNotBuiltIn(arg0:String) : boolean\l+ removeRelationNotInPackage(arg0:IModel) : Set\l+ parseMethodSignature(arg0:String) : String[]\l}"
];
IRelation [
shape="record",
label = "{\<\<interface\>\>\nIRelation|+ getFrom() : String\l+ getTo() : String\l+ getType() : String\l+ getDes() : String\l+ setDes(arg0:String) : void\l}"
];
IOutputStream [
shape="record",
style="filled"
fillcolor="green"
label = "{IOutputStream\n\<\<decorator\>\>\n|+ init(arg0:OutputStream) : void\l+ start() : void\l+ write(arg0:IMethod) : void\l+ write(arg0:IModel) : void\l+ end() : void\l}"
];
Declaration [
shape="record",
label = "{Declaration|- type : String\l- name : String\l- tags : Set\l|+ init(arg0:String,arg1:String) : void\l+ toString() : String\l+ getType() : String\l+ getName() : String\l+ accept(arg0:IVisitor) : void\l+ getTags() : Set\l+ addTag(arg0:String) : void\l}"
];
IPattern [
shape="record",
label = "{\<\<interface\>\>\nIPattern|+ getName() : String\l+ getClasses() : Set\l+ addClass(arg0:IClass) : void\l}"
];
ClassVisitor [
shape="record",
label = "{ClassVisitor|# api : int\l# cv : ClassVisitor\l|+ init(arg0:int) : void\l+ init(arg0:int,arg1:ClassVisitor) : void\l+ visit(arg0:int,arg1:int,arg2:String,arg3:String,arg4:String,arg5:String[]) : void\l+ visitSource(arg0:String,arg1:String) : void\l+ visitOuterClass(arg0:String,arg1:String,arg2:String) : void\l+ visitAnnotation(arg0:String,arg1:boolean) : AnnotationVisitor\l+ visitTypeAnnotation(arg0:int,arg1:TypePath,arg2:String,arg3:boolean) : AnnotationVisitor\l+ visitAttribute(arg0:Attribute) : void\l+ visitInnerClass(arg0:String,arg1:String,arg2:String,arg3:int) : void\l+ visitField(arg0:int,arg1:String,arg2:String,arg3:String,arg4:Object) : FieldVisitor\l+ visitMethod(arg0:int,arg1:String,arg2:String,arg3:String,arg4:String[]) : MethodVisitor\l+ visitEnd() : void\l}"
];
ITraverser [
shape="record",
label = "{\<\<interface\>\>\nITraverser|+ accept(arg0:IVisitor) : void\l}"
];
IDeclaration [
shape="record",
label = "{\<\<interface\>\>\nIDeclaration|+ getType() : String\l+ getName() : String\l+ getTags() : Set\l+ addTag(arg0:String) : void\l}"
];
ClassMethodVisitor [
shape="record",
label = "{ClassMethodVisitor|- c : IClass\l- m : IModel\l|+ init(arg0:int,arg1:IClass,arg2:IModel) : void\l+ init(arg0:int,arg1:ClassVisitor,arg2:IClass,arg3:IModel) : void\l+ visitMethod(arg0:int,arg1:String,arg2:String,arg3:String,arg4:String[]) : MethodVisitor\l addAccessLevel(arg0:int) : String\l addReturnType(arg0:String) : String\l addArguments(arg0:String) : List\l access$0(arg0:ClassMethodVisitor) : IModel\l}"
];
IField [
shape="record",
label = "{\<\<interface\>\>\nIField|+ getName() : String\l+ getType() : String\l+ getAccess() : String\l+ isStatic() : boolean\l+ setStatic(arg0:boolean) : void\l+ getInnerType() : String\l+ setInnerType(arg0:String) : void\l}"
];
App [
shape="record",
label = "{App|+ init() : void\l+ main(arg0:String[]) : void throws Exception\l+ createUmlWithPattern(arg0:String) : void throws Exception\l+ createUmlDiagram(arg0:String) : void throws Exception\l+ createSequenceDiagram(arg0:String[]) : void throws Exception\l}"
];
IModel [
shape="record",
label = "{\<\<interface\>\>\nIModel|+ getClasses() : Set\l+ getRelations() : Set\l+ addClass(arg0:IClass) : void\l+ addRelation(arg0:IRelation) : void\l+ contains(arg0:IRelation) : boolean\l+ addPattern(arg0:IPattern) : void\l+ getPatterns() : Set\l+ setRelation(arg0:Set) : void\l}"
];
ClassFieldVisitor [
shape="record",
label = "{ClassFieldVisitor|- c : IClass\l- m : IModel\l|+ init(arg0:int,arg1:IClass,arg2:IModel) : void\l+ init(arg0:int,arg1:ClassVisitor,arg2:IClass,arg3:IModel) : void\l+ visitField(arg0:int,arg1:String,arg2:String,arg3:String,arg4:Object) : FieldVisitor\l}"
];
Flushable [
shape="record",
label = "{\<\<interface\>\>\nFlushable|+ flush() : void throws IOException\l}"
];
IModel -> IRelation [arrowhead="vee",style="dashed"]
Utility -> IModel [arrowhead="vee",style="dashed"]
SDEditOutputStream -> IMethod [arrowhead="vee",style="dashed"]
Visitor -> ITraverser [arrowhead="vee",style="dashed"]
ClassDeclarationVisitor -> ClassVisitor [arrowhead="onormal"]
ITraverser -> IVisitor [arrowhead="vee",style="dashed"]
ClassMethodVisitor -> IClass [arrowhead="vee"]
IOutputStream -> OutputStream [arrowhead="vee",style="dashed"]
ClassFieldVisitor -> Relation [arrowhead="vee",style="dashed"]
AdapterDetector -> ClassFieldVisitor [arrowhead="vee",style="dashed"]
CompositeDetector -> IDetector [arrowhead="onormal",style="dashed"]
CompositeDetector -> IClass [arrowhead="vee",style="dashed"]
ClassMethodVisitor -> Relation [arrowhead="vee",style="dashed"]
Enum -> Comparable [arrowhead="onormal",style="dashed"]
Clazz -> IDeclaration [arrowhead="vee"]
Pattern -> IClass [arrowhead="vee"]
DecoratorDetector -> IField [arrowhead="vee",style="dashed"]
FilterOutputStream -> OutputStream [arrowhead="vee",label="decorates"]
Method -> IVisitor [arrowhead="vee",style="dashed"]
IOutputStream -> IModel [arrowhead="vee",style="dashed"]
Clazz -> IVisitor [arrowhead="vee",style="dashed"]
IModel -> IPattern [arrowhead="vee",style="dashed"]
Closeable -> AutoCloseable [arrowhead="onormal",style="dashed"]
ClassFieldVisitor -> IClass [arrowhead="vee"]
SDEditOutputStream -> IOutputStream [arrowhead="onormal"]
IClass -> ITraverser [arrowhead="onormal",style="dashed"]
Visitor -> LookupKey [arrowhead="vee",style="dashed"]
VisitType -> VisitType [arrowhead="vee"]
Field -> IField [arrowhead="onormal",style="dashed"]
Relation -> IVisitor [arrowhead="vee",style="dashed"]
IClass -> IMethod [arrowhead="vee",style="dashed"]
AdapterDetector -> ClassMethodVisitor [arrowhead="vee",style="dashed"]
NewbeeFramework -> ClassMethodVisitor [arrowhead="vee",style="dashed"]
Model -> IPattern [arrowhead="vee"]
Model -> IVisitor [arrowhead="vee",style="dashed"]
IDeclaration -> ITraverser [arrowhead="onormal",style="dashed"]
ClassDeclarationVisitor -> IModel [arrowhead="vee"]
SDEditOutputStream -> IVisitor [arrowhead="vee"]
SequenceMethodVisitor -> ClassVisitor [arrowhead="vee",style="dashed"]
ClassMethodVisitor -> ClassMethodVisitor [arrowhead="vee",style="dashed"]
IModel -> ITraverser [arrowhead="onormal",style="dashed"]
NewbeeFramework -> Method [arrowhead="vee",style="dashed"]
Field -> IVisitor [arrowhead="vee",style="dashed"]
SingletonDetector -> IDetector [arrowhead="onormal",style="dashed"]
App -> GraphVizOutputStream [arrowhead="vee",style="dashed"]
Test -> ClassFieldVisitor [arrowhead="vee",style="dashed"]
Visitor -> IVisitor [arrowhead="onormal",style="dashed"]
ClassVisitor -> MethodVisitor [arrowhead="vee",style="dashed"]
GraphVizOutputStream -> Visitor [arrowhead="vee",style="dashed"]
Model -> IModel [arrowhead="onormal",style="dashed"]
SingletonDetector -> Visitor [arrowhead="vee",style="dashed"]
OutputStream -> Closeable [arrowhead="onormal",style="dashed"]
App -> SDEditOutputStream [arrowhead="vee",style="dashed"]
Visitor -> IVisitMethod [arrowhead="vee"]
AdapterDetector -> Relation [arrowhead="vee",style="dashed"]
DecoratorDetector -> IClass [arrowhead="vee",style="dashed"]
Relation -> IRelation [arrowhead="onormal",style="dashed"]
ClassMethodVisitor -> Method [arrowhead="vee",style="dashed"]
App -> NewbeeFramework [arrowhead="vee",style="dashed"]
App -> CompositeDetector [arrowhead="vee",style="dashed"]
NewbeeFramework -> ClassDeclarationVisitor [arrowhead="vee",style="dashed"]
IVisitMethod -> ITraverser [arrowhead="vee",style="dashed"]
IVisitor -> IVisitMethod [arrowhead="vee",style="dashed"]
AdapterDetector -> Clazz [arrowhead="vee",style="dashed"]
IField -> ITraverser [arrowhead="onormal",style="dashed"]
Test -> Clazz [arrowhead="vee",style="dashed"]
NewbeeFramework -> IOutputStream [arrowhead="vee"]
IMethod -> ITraverser [arrowhead="onormal",style="dashed"]
Test -> ClassDeclarationVisitor [arrowhead="vee",style="dashed"]
AdapterDetector -> ClassDeclarationVisitor [arrowhead="vee",style="dashed"]
NewbeeFramework -> ClassFieldVisitor [arrowhead="vee",style="dashed"]
SequenceMethodVisitor -> SequenceMethodVisitor [arrowhead="vee",style="dashed"]
IRelation -> ITraverser [arrowhead="onormal",style="dashed"]
AdapterDetector -> IClass [arrowhead="vee",style="dashed"]
VisitType -> Enum [arrowhead="onormal"]
App -> SingletonDetector [arrowhead="vee",style="dashed"]
NewbeeFramework -> Clazz [arrowhead="vee",style="dashed"]
IDetector -> IModel [arrowhead="vee",style="dashed"]
SingletonDetector -> Pattern [arrowhead="vee",style="dashed"]
Test -> ClassMethodVisitor [arrowhead="vee",style="dashed"]
Declaration -> IDeclaration [arrowhead="onormal",style="dashed"]
Clazz -> IMethod [arrowhead="vee"]
AdapterDetector -> IModel [arrowhead="vee",style="dashed"]
GraphVizOutputStream -> OutputStream [arrowhead="vee",style="dashed"]
ClassFieldVisitor -> ClassVisitor [arrowhead="vee",style="dashed"]
GraphVizOutputStream -> IOutputStream [arrowhead="onormal"]
Pattern -> IPattern [arrowhead="onormal",style="dashed"]
GraphVizOutputStream -> GraphVizOutputStream [arrowhead="vee",style="dashed"]
Test -> GraphVizOutputStream [arrowhead="vee"]
GraphVizOutputStream -> IModel [arrowhead="vee",style="dashed"]
FilterOutputStream -> OutputStream [arrowhead="onormal"]
ClassDeclarationVisitor -> IClass [arrowhead="vee"]
SequenceMethodVisitor -> IMethod [arrowhead="vee"]
IPattern -> IClass [arrowhead="vee",style="dashed"]
OutputStream -> Flushable [arrowhead="onormal",style="dashed"]
ClassDeclarationVisitor -> Declaration [arrowhead="vee",style="dashed"]
ClassMethodVisitor -> MethodVisitor [arrowhead="vee",style="dashed"]
App -> AdapterDetector [arrowhead="vee",style="dashed"]
AdapterDetector -> IDetector [arrowhead="onormal",style="dashed"]
MethodVisitor -> MethodVisitor [arrowhead="vee"]
IClass -> IField [arrowhead="vee",style="dashed"]
SingletonDetector -> IModel [arrowhead="vee",style="dashed"]
SequenceMethodVisitor -> ClassVisitor [arrowhead="onormal"]
ClassFieldVisitor -> ClassVisitor [arrowhead="onormal"]
LookupKey -> VisitType [arrowhead="vee"]
ClassMethodVisitor -> ClassVisitor [arrowhead="onormal"]
DecoratorDetector -> IModel [arrowhead="vee",style="dashed"]
ClassVisitor -> ClassVisitor [arrowhead="vee"]
Enum -> Serializable [arrowhead="onormal",style="dashed"]
IVisitor -> VisitType [arrowhead="vee",style="dashed"]
CompositeDetector -> Pattern [arrowhead="vee",style="dashed"]
NewbeeFramework -> IModel [arrowhead="vee"]
Enum -> Enum [arrowhead="vee",style="dashed"]
IOutputStream -> FilterOutputStream [arrowhead="onormal"]
Method -> IMethod [arrowhead="onormal",style="dashed"]
App -> Model [arrowhead="vee",style="dashed"]
GraphVizOutputStream -> IVisitor [arrowhead="vee"]
Method -> IMethod [arrowhead="vee"]
AdapterDetector -> Pattern [arrowhead="vee",style="dashed"]
CompositeDetector -> IField [arrowhead="vee",style="dashed"]
Clazz -> IClass [arrowhead="onormal",style="dashed"]
SDEditOutputStream -> Visitor [arrowhead="vee",style="dashed"]
SequenceMethodVisitor -> MethodVisitor [arrowhead="vee",style="dashed"]
SingletonDetector -> IVisitor [arrowhead="vee"]
SDEditOutputStream -> SDEditOutputStream [arrowhead="vee",style="dashed"]
IClass -> IDeclaration [arrowhead="vee",style="dashed"]
NewbeeFramework -> IMethod [arrowhead="vee"]
IModel -> IClass [arrowhead="vee",style="dashed"]
DecoratorDetector -> IDetector [arrowhead="onormal",style="dashed"]
SingletonDetector -> SingletonDetector [arrowhead="vee",style="dashed"]
Test -> Model [arrowhead="vee",style="dashed"]
SequenceMethodVisitor -> Method [arrowhead="vee",style="dashed"]
IOutputStream -> IMethod [arrowhead="vee",style="dashed"]
Model -> IClass [arrowhead="vee"]
Visitor -> VisitType [arrowhead="vee",style="dashed"]
NewbeeFramework -> Model [arrowhead="vee",style="dashed"]
ClassFieldVisitor -> IModel [arrowhead="vee"]
ClassFieldVisitor -> Field [arrowhead="vee",style="dashed"]
CompositeDetector -> IModel [arrowhead="vee",style="dashed"]
NewbeeFramework -> SequenceMethodVisitor [arrowhead="vee",style="dashed"]
ClassMethodVisitor -> IModel [arrowhead="vee"]
ClassMethodVisitor -> ClassVisitor [arrowhead="vee",style="dashed"]
Clazz -> IField [arrowhead="vee"]
DecoratorDetector -> Pattern [arrowhead="vee",style="dashed"]
SDEditOutputStream -> OutputStream [arrowhead="vee",style="dashed"]
Model -> IRelation [arrowhead="vee"]
Declaration -> IVisitor [arrowhead="vee",style="dashed"]
IVisitor -> ITraverser [arrowhead="vee",style="dashed"]
ClassDeclarationVisitor -> Relation [arrowhead="vee",style="dashed"]
App -> DecoratorDetector [arrowhead="vee",style="dashed"]
IMethod -> IMethod [arrowhead="vee",style="dashed"]
NewbeeFramework -> IDetector [arrowhead="vee"]
}
