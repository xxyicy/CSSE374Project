digraph G {
fontname = "Avenir Book"
fontsize = 10
node [
fontname = "Avenir Book"
fontsize = 10
shape = "record"
style="filled"
]
edge [
fontname = "Avenir Book"
fontsize = 10
]
VirtualThread [
shape="record",
label = "{VirtualThread|+ init() : void\l+ run() : void\l}"
];
Runnable [
shape="record",
fillcolor="red",label = "{\<\<interface\>\>\nRunnable\n\<\<adaptee\>\>\n\n\<\<target\>\>\n|+ run() : void\l}"
];
Client [
shape="record",
label = "{Client|+ init() : void\l+ main(arg0:String[]) : void throws InterruptedException\l}"
];
Thread [
shape="record",
fillcolor="red",label = "{Thread\n\<\<adapter\>\>\n|- name : char[]\l- priority : int\l- threadQ : Thread\l- eetop : long\l- single_step : boolean\l- daemon : boolean\l- stillborn : boolean\l- target : Runnable\l- group : ThreadGroup\l- contextClassLoader : ClassLoader\l- inheritedAccessControlContext : AccessControlContext\l- threadInitNumber : int\l threadLocals : ThreadLocal$ThreadLocalMap\l inheritableThreadLocals : ThreadLocal$ThreadLocalMap\l- stackSize : long\l- nativeParkEventPointer : long\l- tid : long\l- threadSeqNumber : long\l- threadStatus : int\l parkBlocker : Object\l- blocker : Interruptible\l- blockerLock : Object\l+ MIN_PRIORITY : int\l+ NORM_PRIORITY : int\l+ MAX_PRIORITY : int\l- EMPTY_STACK_TRACE : StackTraceElement[]\l- SUBCLASS_IMPLEMENTATION_PERMISSION : RuntimePermission\l- uncaughtExceptionHandler : Thread$UncaughtExceptionHandler\l- defaultUncaughtExceptionHandler : Thread$UncaughtExceptionHandler\l threadLocalRandomSeed : long\l threadLocalRandomProbe : int\l threadLocalRandomSecondarySeed : int\l|- registerNatives() : void\l- nextThreadNum() : int\l- nextThreadID() : long\l blockedOn(arg0:Interruptible) : void\l+ currentThread() : Thread\l+ yield() : void\l+ sleep(arg0:long) : void throws InterruptedException\l+ sleep(arg0:long,arg1:int) : void throws InterruptedException\l- init(arg0:ThreadGroup,arg1:Runnable,arg2:String,arg3:long) : void\l- init(arg0:ThreadGroup,arg1:Runnable,arg2:String,arg3:long,arg4:AccessControlContext) : void\l# clone() : Object throws CloneNotSupportedException\l+ init() : void\l+ init(arg0:Runnable) : void\l init(arg0:Runnable,arg1:AccessControlContext) : void\l+ init(arg0:ThreadGroup,arg1:Runnable) : void\l+ init(arg0:String) : void\l+ init(arg0:ThreadGroup,arg1:String) : void\l+ init(arg0:Runnable,arg1:String) : void\l+ init(arg0:ThreadGroup,arg1:Runnable,arg2:String) : void\l+ init(arg0:ThreadGroup,arg1:Runnable,arg2:String,arg3:long) : void\l+ start() : void\l- start0() : void\l+ run() : void\l- exit() : void\l+ stop() : void\l+ stop(arg0:Throwable) : void\l+ interrupt() : void\l+ interrupted() : boolean\l+ isInterrupted() : boolean\l- isInterrupted(arg0:boolean) : boolean\l+ destroy() : void\l+ isAlive() : boolean\l+ suspend() : void\l+ resume() : void\l+ setPriority(arg0:int) : void\l+ getPriority() : int\l+ setName(arg0:String) : void\l+ getName() : String\l+ getThreadGroup() : ThreadGroup\l+ activeCount() : int\l+ enumerate(arg0:Thread[]) : int\l+ countStackFrames() : int\l+ join(arg0:long) : void throws InterruptedException\l+ join(arg0:long,arg1:int) : void throws InterruptedException\l+ join() : void throws InterruptedException\l+ dumpStack() : void\l+ setDaemon(arg0:boolean) : void\l+ isDaemon() : boolean\l+ checkAccess() : void\l+ toString() : String\l+ getContextClassLoader() : ClassLoader\l+ setContextClassLoader(arg0:ClassLoader) : void\l+ holdsLock(arg0:Object) : boolean\l+ getStackTrace() : StackTraceElement[]\l+ getAllStackTraces() : Map\l- isCCLOverridden(arg0:Class) : boolean\l- auditSubclass(arg0:Class) : boolean\l- dumpThreads(arg0:Thread[]) : StackTraceElement[][]\l- getThreads() : Thread[]\l+ getId() : long\l+ getState() : Thread$State\l+ setDefaultUncaughtExceptionHandler(arg0:Thread$UncaughtExceptionHandler) : void\l+ getDefaultUncaughtExceptionHandler() : Thread$UncaughtExceptionHandler\l+ getUncaughtExceptionHandler() : Thread$UncaughtExceptionHandler\l+ setUncaughtExceptionHandler(arg0:Thread$UncaughtExceptionHandler) : void\l- dispatchUncaughtException(arg0:Throwable) : void\l processQueue(arg0:ReferenceQueue,arg1:ConcurrentMap) : void\l- setPriority0(arg0:int) : void\l- stop0(arg0:Object) : void\l- suspend0() : void\l- resume0() : void\l- interrupt0() : void\l- setNativeName(arg0:String) : void\l clinit() : void\l}"
];
MainVirtualThread [
shape="record",
color="blue",
label = "{MainVirtualThread\n\<\<Singleton\>\>\n|- uniqueInstance : MainVirtualThread\l- threadArray : List\l+ count : int\l- finished : boolean\l| clinit() : void\l- init() : void\l+ getInstance() : MainVirtualThread\l+ addThread(arg0:VirtualThread) : void\l+ getThreadArray() : List\l+ run() : void\l}"
];
Thread -> Runnable [arrowhead="onormal",style="dashed"]
Thread -> Thread [arrowhead="vee"]
MainVirtualThread -> MainVirtualThread [arrowhead="vee"]
VirtualThread -> Thread [arrowhead="onormal"]
Client -> VirtualThread [arrowhead="vee",style="dashed"]
Thread -> Runnable [arrowhead="vee",label="adapts"]
MainVirtualThread -> VirtualThread [arrowhead="vee"]
MainVirtualThread -> Thread [arrowhead="onormal"]
}
